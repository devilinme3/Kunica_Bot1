from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from datetime import datetime

from database import (
    save_user,
    save_review,
    update_user_language,
    get_user_language,
    search_approved_reviews
)
from moderation import (
    send_to_moderation,
    handle_approve,
    handle_reject,
    handle_user_reviews,
    navigate_user_reviews,
    hide_user_reviews,
)
from translations import translations
from states import UserState, ReviewState
from keyboards import create_language_keyboard, create_city_keyboard, create_main_menu
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters.state import State, StatesGroup


def require_language_and_city(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –∏ –≥–æ—Ä–æ–¥–∞.
    –ï—Å–ª–∏ —è–∑—ã–∫ –∏–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –≤—ã–±—Ä–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≤—ã–±–æ—Ä.
    """
    async def wrapper(message: types.Message, *args, **kwargs):
        state: FSMContext = kwargs.get("state")
        user_id = message.from_user.id

        lang = get_user_language(user_id)
        state_data = await state.get_data()
        city = state_data.get("city")

        if not lang:
            keyboard = create_language_keyboard()
            await message.answer("üåç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=keyboard)
            await UserState.language.set()
            return

        if not city:
            keyboard = create_city_keyboard(lang)
            await message.answer(translations[lang]["choose_city"], reply_markup=keyboard)
            await UserState.city.set()
            return

        await func(message, *args, **kwargs)

    return wrapper


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞:
class SearchState(StatesGroup):
    employer_name = State()  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è


def register_handlers(dp, bot):
    @dp.message_handler(commands=["start"], state="*")
    async def start_command(message: types.Message, state: FSMContext):
        await state.finish()
        save_user(message.from_user.id, message.from_user.full_name)
        keyboard = create_language_keyboard()
        await message.answer("üåç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=keyboard)
        await UserState.language.set()

    @dp.message_handler(state=UserState.language)
    async def choose_language(message: types.Message, state: FSMContext):
        lang = message.text.split(" ")[1]
        update_user_language(message.from_user.id, lang)
        await state.update_data(language=lang)
        keyboard = create_city_keyboard(lang)
        await message.answer(translations[lang]["choose_city"], reply_markup=keyboard)
        await UserState.city.set()

    @dp.message_handler(state=UserState.city)
    async def choose_city(message: types.Message, state: FSMContext):
        user_data = await state.get_data()
        lang = user_data.get("language", "–†—É—Å—Å–∫–∏–π")
        await state.update_data(city=message.text)
        keyboard = create_main_menu(lang)
        await message.answer(translations[lang]["main_menu"], reply_markup=keyboard)
        await UserState.main_menu.set()

    @dp.message_handler(
        Text(equals=[
            "üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫/–ì–æ—Ä–æ–¥",
            "üåê Zmie≈Ñ jƒôzyk/miasto",
            "üåê –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É/–º—ñ—Å—Ç–æ"
        ]),
        state="*"
    )
    async def change_language_city(message: types.Message, state: FSMContext):
        await state.finish()
        await state.reset_data()
        keyboard = create_language_keyboard()
        await message.answer("üåç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=keyboard)
        await UserState.language.set()

    @dp.message_handler(
        Text(equals=[
            "‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤",
            "‚úçÔ∏è Zostaw recenzjƒô",
            "‚úçÔ∏è –ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫"
        ]),
        state="*"
    )
    @require_language_and_city
    async def leave_review(message: types.Message, state: FSMContext):
        user_data = await state.get_data()
        lang = user_data.get("language", "–†—É—Å—Å–∫–∏–π")
        await message.answer(translations[lang]["enter_employer"])
        await ReviewState.employer.set()

    @dp.message_handler(state=ReviewState.employer)
    async def get_employer(message: types.Message, state: FSMContext):
        if not message.text.isascii():
            await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è –º–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü–µ–π.")
            return
        await state.update_data(employer=message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5.")
        await ReviewState.rating.set()

    @dp.message_handler(state=ReviewState.rating)
    async def get_rating(message: types.Message, state: FSMContext):
        try:
            rating = int(message.text)
            if not (1 <= rating <= 5):
                raise ValueError
        except ValueError:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –æ—Ü–µ–Ω–∫—É (–æ—Ç 1 –¥–æ 5).")
            return
        await state.update_data(rating=rating)
        await message.answer("–û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.")
        await ReviewState.comment.set()

    @dp.message_handler(state=ReviewState.comment)
    async def review_comment(message: types.Message, state: FSMContext):
        user_data = await state.get_data()
        review_data = {
            "user_id": message.from_user.id,
            "user_name": message.from_user.full_name,
            "employer": user_data["employer"],
            "rating": user_data["rating"],
            "comment": message.text,
            "city": user_data.get("city", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥"),
            "date": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "status": "pending",
        }
        review_id = save_review(review_data)
        review_data["id"] = review_id
        await send_to_moderation(review_data, bot)
        await message.answer("–í–∞—à –æ—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!")
        await state.finish()

    #
    # --- –õ–û–ì–ò–ö–ê –ü–û–ò–°–ö–ê ---
    #
    @dp.message_handler(
        Text(equals=[
            "üîç –ù–∞–π—Ç–∏ –æ—Ç–∑—ã–≤—ã",
            "üîç Znajd≈∫ recenzje",
            "üîç –ó–Ω–∞–π—Ç–∏ –≤—ñ–¥–≥—É–∫–∏"
        ]),
        state="*"
    )
    @require_language_and_city
    async def find_reviews_start(message: types.Message, state: FSMContext):
        """
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –Ω–∞–π—Ç–∏ –æ—Ç–∑—ã–≤—ã, –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è (–ª–∞—Ç–∏–Ω–∏—Ü–µ–π).
        """
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã):")
        await SearchState.employer_name.set()

    @dp.message_handler(state=SearchState.employer_name)
    async def process_search_name(message: types.Message, state: FSMContext):
        """
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª —Å—Ç—Ä–æ–∫—É, –¥–µ–ª–∞–µ–º fuzzy-–ø–æ–∏—Å–∫ –ø–æ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–º –æ—Ç–∑—ã–≤–∞–º.
        """
        employer_query = message.text.strip()
        if not employer_query.isascii():
            await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è –º–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return

        page = 0
        limit = 5
        result = search_approved_reviews(employer_query, page=page, limit=limit)
        if not result:
            await message.answer(f"–ü–æ –∑–∞–ø—Ä–æ—Å—É ¬´{employer_query}¬ª –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            await state.finish()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º matched_employer, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –ª–∏—Å—Ç–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        await state.update_data(
            search_query=employer_query,
            matched_employer=result["matched_employer"],  # –∏–∑ –Ω–∏–∂–Ω–µ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞
            current_page=page,
            total_pages=result["total_pages"],
            limit=limit
        )

        await send_search_results(message, result)
        # –æ—Å—Ç–∞–≤–ª—è–µ–º state=SearchState.employer_name –∏–ª–∏ finish
        # —Ä–µ—à–∏—Ç–µ, –Ω—É–∂–Ω–æ –ª–∏ –≤–∞–º —Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª—å—à–µ

    async def send_search_results(message: types.Message, data: dict):
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞.
        """
        matched_employer = data["matched_employer"]
        total_reviews = data["total_reviews"]
        avg_rating = data["average_rating"]
        reviews = data["reviews"]
        total_pages = data["total_pages"]
        current_page = data["current_page"]

        text = (
            f"–ü–æ –∑–∞–ø—Ä–æ—Å—É <b>{matched_employer}</b> –Ω–∞–π–¥–µ–Ω–æ <b>{total_reviews}</b> –æ—Ç–∑—ã–≤–æ–≤.\n"
            f"–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: <b>{round(avg_rating,2)}</b>\n\n"
            f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page+1} –∏–∑ {total_pages}.\n\n"
        )

        for r in reviews:
            text += (
                f"<b>–î–∞—Ç–∞:</b> {r['date']}\n"
                f"<b>–†–µ–π—Ç–∏–Ω–≥:</b> {r['rating']}\n"
                f"<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {r['comment']}\n"
                "----------------------\n"
            )

        keyboard = InlineKeyboardMarkup(row_width=3)
        # –ö–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥/–≤–ø–µ—Ä—ë–¥"
        if current_page > 0:
            keyboard.insert(
                InlineKeyboardButton(
                    "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data=f"search_prev_{current_page}"
                )
            )
        if current_page < total_pages - 1:
            keyboard.insert(
                InlineKeyboardButton(
                    "‚û°Ô∏è –í–ø–µ—Ä—ë–¥",
                    callback_data=f"search_next_{current_page}"
                )
            )
        await message.answer(text, parse_mode="HTML", reply_markup=keyboard)

    @dp.callback_query_handler(Text(startswith="search_prev_"), state="*")
    async def search_prev_page(callback_query: types.CallbackQuery, state: FSMContext):
        old_page = int(callback_query.data.split("_")[-1])
        new_page = old_page - 1
        user_data = await state.get_data()

        employer_query = user_data.get("search_query")
        matched_emp = user_data.get("matched_employer")
        limit = user_data.get("limit", 5)
        if not employer_query or not matched_emp:
            await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞.")
            return

        # –¥–µ–ª–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (fuzzy) ‚Äî –Ω–æ —á—Ç–æ–±—ã —É–∂–µ –Ω–µ –∏—Å–∫–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        # –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ search_approved_reviews
        result = search_approved_reviews(matched_emp, page=new_page, limit=limit)
        if not result:
            await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.", show_alert=True)
            return

        # –æ–±–Ω–æ–≤–ª—è–µ–º current_page
        await state.update_data(current_page=new_page)

        # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.delete_message(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id
        )

        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await send_search_results(callback_query.message, result)
        await callback_query.answer()

    @dp.callback_query_handler(Text(startswith="search_next_"), state="*")
    async def search_next_page(callback_query: types.CallbackQuery, state: FSMContext):
        old_page = int(callback_query.data.split("_")[-1])
        new_page = old_page + 1
        user_data = await state.get_data()

        matched_emp = user_data.get("matched_employer")
        limit = user_data.get("limit", 5)
        if not matched_emp:
            await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞.")
            return

        result = search_approved_reviews(matched_emp, page=new_page, limit=limit)
        if not result:
            await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.", show_alert=True)
            return

        await state.update_data(current_page=new_page)

        await bot.delete_message(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id
        )
        await send_search_results(callback_query.message, result)
        await callback_query.answer()

    #
    # --- CALLBACK –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (—É–∂–µ –±—ã–ª–∏) ---
    #
    @dp.callback_query_handler(Text(startswith="approve_"))
    async def cb_approve(callback_query: types.CallbackQuery):
        await handle_approve(callback_query, bot)

    @dp.callback_query_handler(Text(startswith="reject_"))
    async def cb_reject(callback_query: types.CallbackQuery):
        await handle_reject(callback_query, bot)

    @dp.callback_query_handler(Text(startswith="user_reviews_"))
    async def cb_user_reviews(callback_query: types.CallbackQuery):
        await handle_user_reviews(callback_query, bot)

    @dp.callback_query_handler(Text(startswith="navigate_"))
    async def cb_navigate(callback_query: types.CallbackQuery):
        await navigate_user_reviews(callback_query, bot)

    @dp.callback_query_handler(Text(equals="hide_reviews"))
    async def cb_hide(callback_query: types.CallbackQuery):
        await hide_user_reviews(callback_query, bot)
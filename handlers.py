from aiogram import types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ database.py
from database import (
    init_db,
    save_user,
    save_review,
    update_user_language,
    get_user_language,
    approve_review,
    reject_review,
    get_user_id_by_review,
    get_user_reviews_count,
    get_user_reviews_paginated,
    search_approved_reviews
)

# –õ–æ–≥–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
from moderation import (
    send_to_moderation,
    handle_approve,
    handle_reject,
    handle_user_reviews,
    navigate_user_reviews,
    hide_user_reviews
)

# –ò–º–ø–æ—Ä—Ç –ø–µ—Ä–µ–≤–æ–¥–æ–≤
from translations import translations

# –°–æ—Å—Ç–æ—è–Ω–∏—è
from states import UserState, ReviewState
from aiogram.dispatcher.filters.state import State, StatesGroup


###############################################################################
# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ (fuzzy)
###############################################################################
class SearchState(StatesGroup):
    employer_name = State()


###############################################################################
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä: —è–∑—ã–∫, –≥–æ—Ä–æ–¥, –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
###############################################################################
def create_language_keyboard():
    """
    –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞: –†—É—Å—Å–∫–∏–π, –ü–æ–ª—å—Å–∫–∏–π, –£–∫—Ä–∞–∏–Ω—Å–∫–∏–π.
    """
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üá∑üá∫ –†—É—Å—Å–∫–∏–π", "üáµüá± Polski", "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞")
    return kb

def create_city_keyboard(lang: str):
    """
    –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–æ—Ä–æ–¥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ translations[lang]["cities"].
    """
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    cities = translations[lang]["cities"]  # –ù–∞–ø—Ä–∏–º–µ—Ä, ["üèô –í–∞—Ä—à–∞–≤–∞"] –∏–ª–∏ ["üèô Warszawa"]
    for city in cities:
        kb.add(city)
    return kb

def create_main_menu(lang: str):
    """
    –°–æ–∑–¥–∞—ë—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ (3 –∫–Ω–æ–ø–∫–∏).
    """
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    # –ú–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –≤ translations, –Ω–æ –∑–¥–µ—Å—å –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å
    buttons_map = {
        "–†—É—Å—Å–∫–∏–π": ["‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", "üîç –ù–∞–π—Ç–∏ –æ—Ç–∑—ã–≤—ã", "üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫/–ì–æ—Ä–æ–¥"],
        "Polski": ["‚úçÔ∏è Zostaw recenzjƒô", "üîç Znajd≈∫ recenzje", "üåê Zmie≈Ñ jƒôzyk/miasto"],
        "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞": ["‚úçÔ∏è –ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫", "üîç –ó–Ω–∞–π—Ç–∏ –≤—ñ–¥–≥—É–∫–∏", "üåê –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É/–º—ñ—Å—Ç–æ"]
    }
    for b in buttons_map.get(lang, buttons_map["–†—É—Å—Å–∫–∏–π"]):
        kb.add(b)
    return kb


###############################################################################
# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä: –ø—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —è–∑—ã–∫/–≥–æ—Ä–æ–¥
###############################################################################
def require_language_and_city(func):
    async def wrapper(message: types.Message, *args, **kwargs):
        state: FSMContext = kwargs.get("state")
        user_id = message.from_user.id

        lang = get_user_language(user_id)
        data = await state.get_data()
        city = data.get("city")

        if not lang:
            # –ù–µ—Ç —è–∑—ã–∫–∞ ‚Äî –ø–æ–∫–∞–∂–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —è–∑—ã–∫–æ–≤
            kb = create_language_keyboard()
            await message.answer("üåç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=kb)
            await UserState.language.set()
            return

        if not city:
            # –ù–µ—Ç –≥–æ—Ä–æ–¥–∞ ‚Äî –ø–æ–∫–∞–∂–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–æ—Ä–æ–¥–æ–≤
            kb = create_city_keyboard(lang)
            await message.answer(translations[lang]["choose_city"], reply_markup=kb)
            await UserState.city.set()
            return

        # –í—Å—ë –≤—ã–±—Ä–∞–Ω–æ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        await func(message, *args, **kwargs)
    return wrapper


###############################################################################
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
###############################################################################
def register_handlers(dp, bot):

    # 1. /start
    @dp.message_handler(commands=["start"], state="*")
    async def start_command(message: types.Message, state: FSMContext):
        # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.finish()
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        save_user(message.from_user.id, message.from_user.full_name)
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
        kb = create_language_keyboard()
        await message.answer("üåç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=kb)
        await UserState.language.set()

    # 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    @dp.message_handler(state=UserState.language)
    async def choose_language(message: types.Message, state: FSMContext):
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –≤–∏–¥–∞ "üá∑üá∫ –†—É—Å—Å–∫–∏–π" => –±–µ—Ä—ë–º –≤—Ç–æ—Ä–æ–µ —Å–ª–æ–≤–æ
        splitted = message.text.split(" ", 1)
        if len(splitted) > 1:
            lang = splitted[1]
        else:
            lang = "–†—É—Å—Å–∫–∏–π"

        update_user_language(message.from_user.id, lang)
        await state.update_data(language=lang)

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
        kb = create_city_keyboard(lang)
        await message.answer(translations[lang]["choose_city"], reply_markup=kb)
        await UserState.city.set()

    # 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
    @dp.message_handler(state=UserState.city)
    async def choose_city(message: types.Message, state: FSMContext):
        data = await state.get_data()
        lang = data.get("language", "–†—É—Å—Å–∫–∏–π")
        city = message.text

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥
        await state.update_data(city=city)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        kb = create_main_menu(lang)
        await message.answer(translations[lang]["main_menu"], reply_markup=kb)
        await UserState.main_menu.set()

    # 4. –°–º–µ–Ω–∞ —è–∑—ã–∫–∞/–≥–æ—Ä–æ–¥–∞
    @dp.message_handler(
        Text(equals=[
            "üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫/–ì–æ—Ä–æ–¥",
            "üåê Zmie≈Ñ jƒôzyk/miasto",
            "üåê –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É/–º—ñ—Å—Ç–æ"
        ]),
        state="*"
    )
    async def change_language_city(message: types.Message, state: FSMContext):
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.finish()
        await state.reset_data()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —è–∑—ã–∫–æ–≤
        kb = create_language_keyboard()
        await message.answer("üåç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=kb)
        await UserState.language.set()

    # 5. –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
    @dp.message_handler(Text(equals=[
        "‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤",
        "‚úçÔ∏è Zostaw recenzjƒô",
        "‚úçÔ∏è –ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫"
    ]), state="*")
    @require_language_and_city
    async def leave_review(message: types.Message, state: FSMContext):
        data = await state.get_data()
        lang = data.get("language", "–†—É—Å—Å–∫–∏–π")

        # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è "enter_employer"
        await message.answer(translations[lang]["enter_employer"])
        await ReviewState.employer.set()

    @dp.message_handler(state=ReviewState.employer)
    async def get_employer(message: types.Message, state: FSMContext):
        if not message.text.isascii():
            await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è –º–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü–µ–π.")
            return
        await state.update_data(employer=message.text)

        data = await state.get_data()
        lang = data.get("language", "–†—É—Å—Å–∫–∏–π")
        # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è "enter_rating"
        await message.answer(translations[lang]["enter_rating"])
        await ReviewState.rating.set()

    @dp.message_handler(state=ReviewState.rating)
    async def get_rating(message: types.Message, state: FSMContext):
        try:
            rating = int(message.text)
            if rating < 1 or rating > 5:
                raise ValueError
        except ValueError:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –æ—Ü–µ–Ω–∫—É (–æ—Ç 1 –¥–æ 5).")
            return

        await state.update_data(rating=rating)
        data = await state.get_data()
        lang = data.get("language", "–†—É—Å—Å–∫–∏–π")
        # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è "enter_comment"
        await message.answer(translations[lang]["enter_comment"])
        await ReviewState.comment.set()

    @dp.message_handler(state=ReviewState.comment)
    async def review_comment(message: types.Message, state: FSMContext):
        data = await state.get_data()
        lang = data.get("language", "–†—É—Å—Å–∫–∏–π")

        review_data = {
            "user_id": message.from_user.id,
            "user_name": message.from_user.full_name,
            "employer": data["employer"],
            "rating": data["rating"],
            "comment": message.text,
            "city": data.get("city", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥"),
            "date": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "status": "pending",
        }
        review_id = save_review(review_data)
        review_data["id"] = review_id
        await send_to_moderation(review_data, bot)

        # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è "review_submitted"
        await message.answer(translations[lang]["review_submitted"])
        await state.finish()

    # 6. –ù–∞–π—Ç–∏ –æ—Ç–∑—ã–≤—ã (fuzzy)
    @dp.message_handler(Text(equals=[
        "üîç –ù–∞–π—Ç–∏ –æ—Ç–∑—ã–≤—ã",
        "üîç Znajd≈∫ recenzje",
        "üîç –ó–Ω–∞–π—Ç–∏ –≤—ñ–¥–≥—É–∫–∏"
    ]), state="*")
    @require_language_and_city
    async def find_reviews_start(message: types.Message, state: FSMContext):
        data = await state.get_data()
        lang = data.get("language", "–†—É—Å—Å–∫–∏–π")

        # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è "fuzzy_search_prompt"
        prompt = translations[lang]["fuzzy_search_prompt"]
        await message.answer(prompt)
        await SearchState.employer_name.set()

    @dp.message_handler(state=SearchState.employer_name)
    async def process_search_name(message: types.Message, state: FSMContext):
        employer_query = message.text.strip()
        if not employer_query.isascii():
            await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è –º–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü–µ–π.")
            return

        data = await state.get_data()
        lang = data.get("language", "–†—É—Å—Å–∫–∏–π")

        page = 0
        limit = 5
        result = search_approved_reviews(employer_query, page=page, limit=limit)
        if not result:
            # no_results
            msg_nores = translations[lang]["no_results"].format(query=employer_query)
            await message.answer(msg_nores)
            await state.finish()
            return

        await state.update_data(
            search_query=employer_query,
            matched_employer=result["matched_employer"],
            current_page=page,
            total_pages=result["total_pages"],
            limit=limit
        )
        await send_search_results(message, result, lang)

    async def send_search_results(message: types.Message, data: dict, lang: str):
        """
        –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ —à–∞–±–ª–æ–Ω—É search_results_header, –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º count, avg, 
        —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏ —Ç.–¥.
        """
        matched_employer = data["matched_employer"]
        total_reviews = data["total_reviews"]
        avg_rating = data["average_rating"]
        reviews = data["reviews"]
        total_pages = data["total_pages"]
        current_page = data["current_page"]

        # –®–∞–±–ª–æ–Ω: search_results_header
        header_template = translations[lang]["search_results_header"]
        text_header = header_template.format(
            employer=matched_employer,
            count=total_reviews,
            avg=round(avg_rating, 2),
            page=current_page + 1,
            total=total_pages
        )

        text = text_header
        # –í—ã–≤–æ–¥–∏–º —Å–∞–º–∏ –æ—Ç–∑—ã–≤—ã
        for r in reviews:
            text += (
                f"üóì <b>–î–∞—Ç–∞:</b> {r['date']}\n"
                f"‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥:</b> {r['rating']}\n"
                f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {r['comment']}\n"
                "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n"
            )

        # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        keyboard = InlineKeyboardMarkup(row_width=3)
        if current_page > 0:
            keyboard.insert(
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"search_prev_{current_page}")
            )
        if current_page < total_pages - 1:
            keyboard.insert(
                InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f"search_next_{current_page}")
            )

        await message.answer(text, parse_mode="HTML", reply_markup=keyboard)

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞
    @dp.callback_query_handler(Text(startswith="search_prev_"), state="*")
    async def search_prev_page(callback_query: types.CallbackQuery, state: FSMContext):
        old_page = int(callback_query.data.split("_")[-1])
        new_page = old_page - 1
        data = await state.get_data()
        lang = data.get("language", "–†—É—Å—Å–∫–∏–π")

        matched_emp = data.get("matched_employer")
        limit = data.get("limit", 5)
        if not matched_emp:
            await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞.")
            return

        result = search_approved_reviews(matched_emp, page=new_page, limit=limit)
        if not result:
            await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.", show_alert=True)
            return

        await state.update_data(current_page=new_page)
        await bot.delete_message(chat_id=callback_query.message.chat.id,
                                message_id=callback_query.message.message_id)
        await send_search_results(callback_query.message, result, lang)
        await callback_query.answer()

    @dp.callback_query_handler(Text(startswith="search_next_"), state="*")
    async def search_next_page(callback_query: types.CallbackQuery, state: FSMContext):
        old_page = int(callback_query.data.split("_")[-1])
        new_page = old_page + 1
        data = await state.get_data()
        lang = data.get("language", "–†—É—Å—Å–∫–∏–π")

        matched_emp = data.get("matched_employer")
        limit = data.get("limit", 5)
        if not matched_emp:
            await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞.")
            return

        result = search_approved_reviews(matched_emp, page=new_page, limit=limit)
        if not result:
            await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.", show_alert=True)
            return

        await state.update_data(current_page=new_page)
        await bot.delete_message(chat_id=callback_query.message.chat.id,
                                message_id=callback_query.message.message_id)
        await send_search_results(callback_query.message, result, lang)
        await callback_query.answer()

    #
    # CALLBACKS –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    #
    @dp.callback_query_handler(Text(startswith="approve_"))
    async def cb_approve(callback_query: types.CallbackQuery):
        await handle_approve(callback_query, bot)

    @dp.callback_query_handler(Text(startswith="reject_"))
    async def cb_reject(callback_query: types.CallbackQuery):
        await handle_reject(callback_query, bot)

    @dp.callback_query_handler(Text(startswith="user_reviews_"))
    async def cb_user_reviews(callback_query: types.CallbackQuery):
        await handle_user_reviews(callback_query, bot)

    @dp.callback_query_handler(Text(startswith="navigate_"))
    async def cb_navigate(callback_query: types.CallbackQuery):
        await navigate_user_reviews(callback_query, bot)

    @dp.callback_query_handler(Text(equals="hide_reviews"))
    async def cb_hide(callback_query: types.CallbackQuery):
        await hide_user_reviews(callback_query, bot)
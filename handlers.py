from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç –ª–æ–≥–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
from database import (
    save_user,
    save_review,
    update_user_language,
    get_user_language,
)
from moderation import (
    send_to_moderation,
    handle_approve,
    handle_reject,
    handle_user_reviews,
    navigate_user_reviews,
    hide_user_reviews,
)

# –ò–º–ø–æ—Ä—Ç –ø–µ—Ä–µ–≤–æ–¥–æ–≤, —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
from translations import translations
from states import UserState, ReviewState
from keyboards import create_language_keyboard, create_city_keyboard, create_main_menu


def require_language_and_city(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –∏ –≥–æ—Ä–æ–¥–∞.
    –ï—Å–ª–∏ —è–∑—ã–∫ –∏–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –≤—ã–±—Ä–∞–Ω ‚Äî –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤—ã–±–æ—Ä.
    """
    async def wrapper(message: types.Message, *args, **kwargs):
        state: FSMContext = kwargs.get("state")
        user_id = message.from_user.id

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        lang = get_user_language(user_id)
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–æ—Ä–æ–¥ –∏–∑ FSMContext
        state_data = await state.get_data()
        city = state_data.get("city")

        # –ï—Å–ª–∏ —è–∑—ã–∫ –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–Ω
        if not lang:
            keyboard = create_language_keyboard()
            await message.answer("üåç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=keyboard)
            await UserState.language.set()
            return

        # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–Ω
        if not city:
            keyboard = create_city_keyboard(lang)
            await message.answer(translations[lang]["choose_city"], reply_markup=keyboard)
            await UserState.city.set()
            return

        # –ï—Å–ª–∏ —è–∑—ã–∫ –∏ –≥–æ—Ä–æ–¥ –≤—ã–±—Ä–∞–Ω—ã, –≤—ã–∑—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        await func(message, *args, **kwargs)

    return wrapper


def register_handlers(dp, bot):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–∫–æ–º–∞–Ω–¥—ã, —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ–ª–±—ç–∫–∏) –±–æ—Ç–∞.
    """

    #
    # 1. /start
    #
    @dp.message_handler(commands=["start"], state="*")
    async def start_command(message: types.Message, state: FSMContext):
        """
        –ü—Ä–∏ /start —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫.
        """
        await state.finish()
        save_user(message.from_user.id, message.from_user.full_name)
        keyboard = create_language_keyboard()
        await message.answer("üåç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=keyboard)
        await UserState.language.set()

    #
    # 2. –í—ã–±–æ—Ä —è–∑—ã–∫–∞
    #
    @dp.message_handler(state=UserState.language)
    async def choose_language(message: types.Message, state: FSMContext):
        """
        –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥.
        """
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –≤–∏–¥–∞ "üá∑üá∫ –†—É—Å—Å–∫–∏–π" => –±–µ—Ä—ë–º –≤—Ç–æ—Ä–æ–µ —Å–ª–æ–≤–æ "–†—É—Å—Å–∫–∏–π"
        lang = message.text.split(" ")[1]
        update_user_language(message.from_user.id, lang)

        await state.update_data(language=lang)
        keyboard = create_city_keyboard(lang)
        await message.answer(translations[lang]["choose_city"], reply_markup=keyboard)
        await UserState.city.set()

    #
    # 3. –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞
    #
    @dp.message_handler(state=UserState.city)
    async def choose_city(message: types.Message, state: FSMContext):
        """
        –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ.
        """
        user_data = await state.get_data()
        lang = user_data.get("language", "–†—É—Å—Å–∫–∏–π")

        await state.update_data(city=message.text)
        keyboard = create_main_menu(lang)
        await message.answer(translations[lang]["main_menu"], reply_markup=keyboard)
        await UserState.main_menu.set()

    #
    # 4. –°–º–µ–Ω–∞ —è–∑—ã–∫–∞/–≥–æ—Ä–æ–¥–∞ (—É—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ —è–∑—ã–∫–∏)
    #
    @dp.message_handler(
        Text(equals=[
            "üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫/–ì–æ—Ä–æ–¥",
            "üåê Zmie≈Ñ jƒôzyk/miasto",
            "üåê –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É/–º—ñ—Å—Ç–æ"
        ]),
        state="*"
    )
    async def change_language_city(message: types.Message, state: FSMContext):
        """
        –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –¥–∞–Ω–Ω—ã–µ, –ø—Ä–æ—Å–∏—Ç –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ –∑–∞–Ω–æ–≤–æ.
        """
        await state.finish()
        await state.reset_data()

        keyboard = create_language_keyboard()
        await message.answer("üåç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=keyboard)
        await UserState.language.set()

    #
    # 5. –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ (—É—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ —è–∑—ã–∫–∏)
    #
    @dp.message_handler(
        Text(equals=[
            "‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤",
            "‚úçÔ∏è Zostaw recenzjƒô",
            "‚úçÔ∏è –ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫"
        ]),
        state="*"
    )
    @require_language_and_city
    async def leave_review(message: types.Message, state: FSMContext):
        """
        –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤–≤–æ–¥–∞ –æ—Ç–∑—ã–≤–∞: —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å -> —Ä–µ–π—Ç–∏–Ω–≥ -> –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.
        """
        user_data = await state.get_data()
        lang = user_data.get("language", "–†—É—Å—Å–∫–∏–π")
        await message.answer(translations[lang]["enter_employer"])
        await ReviewState.employer.set()

    #
    # 6. –í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è (–ª–∞—Ç–∏–Ω–∏—Ü–µ–π)
    #
    @dp.message_handler(state=ReviewState.employer)
    async def get_employer(message: types.Message, state: FSMContext):
        if not message.text.isascii():
            await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è –º–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü–µ–π.")
            return
        await state.update_data(employer=message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5.")
        await ReviewState.rating.set()

    #
    # 7. –í–≤–æ–¥ —Ä–µ–π—Ç–∏–Ω–≥–∞ (1‚Äì5)
    #
    @dp.message_handler(state=ReviewState.rating)
    async def get_rating(message: types.Message, state: FSMContext):
        try:
            rating = int(message.text)
            if not (1 <= rating <= 5):
                raise ValueError
        except ValueError:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –æ—Ü–µ–Ω–∫—É (–æ—Ç 1 –¥–æ 5).")
            return

        await state.update_data(rating=rating)
        await message.answer("–û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.")
        await ReviewState.comment.set()

    #
    # 8. –í–≤–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
    #
    @dp.message_handler(state=ReviewState.comment)
    async def review_comment(message: types.Message, state: FSMContext):
        user_data = await state.get_data()
        review_data = {
            "user_id": message.from_user.id,
            "user_name": message.from_user.full_name,
            "employer": user_data["employer"],
            "rating": user_data["rating"],
            "comment": message.text,
            "city": user_data.get("city", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥"),
            "date": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "status": "pending",
        }
        review_id = save_review(review_data)
        review_data["id"] = review_id

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        await send_to_moderation(review_data, bot)

        await message.answer("–í–∞—à –æ—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!")
        await state.finish()

    #
    # 9. –ù–∞–π—Ç–∏ –æ—Ç–∑—ã–≤—ã (—É—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ —è–∑—ã–∫–∏)
    #
    @dp.message_handler(
        Text(equals=[
            "üîç –ù–∞–π—Ç–∏ –æ—Ç–∑—ã–≤—ã",
            "üîç Znajd≈∫ recenzje",
            "üîç –ó–Ω–∞–π—Ç–∏ –≤—ñ–¥–≥—É–∫–∏"
        ]),
        state="*"
    )
    @require_language_and_city
    async def find_reviews(message: types.Message, state: FSMContext):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–∑—ã–≤–æ–≤.
        """
        user_data = await state.get_data()
        lang = user_data.get("language", "–†—É—Å—Å–∫–∏–π")
        await message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:")
        # –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ (–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞)

    #
    # 10. Callback-—Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    #
    @dp.callback_query_handler(Text(startswith="approve_"))
    async def cb_approve(callback_query: types.CallbackQuery):
        """
        –û–¥–æ–±—Ä–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –∏–∑ –≥—Ä—É–ø–ø—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (—É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞).
        """
        await handle_approve(callback_query, bot)

    @dp.callback_query_handler(Text(startswith="reject_"))
    async def cb_reject(callback_query: types.CallbackQuery):
        """
        –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –∏–∑ –≥—Ä—É–ø–ø—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (—É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞).
        """
        await handle_reject(callback_query, bot)

    @dp.callback_query_handler(Text(startswith="user_reviews_"))
    async def cb_user_reviews(callback_query: types.CallbackQuery):
        """
        –ü–æ–∫–∞–∑ –æ—Ç–∑—ã–≤–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É.
        """
        await handle_user_reviews(callback_query, bot)

    @dp.callback_query_handler(Text(startswith="navigate_"))
    async def cb_navigate(callback_query: types.CallbackQuery):
        """
        –ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º).
        """
        await navigate_user_reviews(callback_query, bot)

    @dp.callback_query_handler(Text(equals="hide_reviews"))
    async def cb_hide(callback_query: types.CallbackQuery):
        """
        –°–∫—Ä—ã—Ç—å (—É–¥–∞–ª–∏—Ç—å) —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—Ç–∑—ã–≤–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–∞—Ç–∞.
        """
        await hide_user_reviews(callback_query, bot)
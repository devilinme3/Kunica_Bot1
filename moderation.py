from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from database import (
    approve_review,
    reject_review,
    get_user_id_by_review,
    get_user_reviews_paginated,
    get_user_reviews_count
)


async def send_to_moderation(data, bot):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤ –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—É/–∫–∞–Ω–∞–ª –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.
    """
    try:
        # –ö–Ω–æ–ø–∫–∏: –æ–¥–æ–±—Ä–∏—Ç—å, –æ—Ç–∫–ª–æ–Ω–∏—Ç—å, –æ—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        keyboard = InlineKeyboardMarkup(row_width=2)
        approve_btn = InlineKeyboardButton(
            text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å",
            callback_data=f"approve_{data['city']}_{data['id']}"
        )
        reject_btn = InlineKeyboardButton(
            text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
            callback_data=f"reject_{data['city']}_{data['id']}"
        )
        user_reviews_btn = InlineKeyboardButton(
            text="üìã –û—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            callback_data=f"user_reviews_{data['user_id']}"
        )
        keyboard.add(approve_btn, reject_btn)
        keyboard.add(user_reviews_btn)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = (
            f"üÜï <b>–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤!</b>\n"
            f"üë§ <b>ID:</b> {data['user_id']}\n"
            f"üë• <b>–ò–º—è:</b> {data['user_name']}\n"
            f"üè¢ <b>–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å:</b> {data['employer']}\n"
            f"‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥:</b> {data['rating']}\n"
            f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {data['comment']}\n"
            f"üåÜ <b>–ì–æ—Ä–æ–¥:</b> {data['city']}\n"
            f"üìÖ <b>–î–∞—Ç–∞:</b> {data['date']}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É/–∫–∞–Ω–∞–ª –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        await bot.send_message(
            chat_id="-1002498880033",  # –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ADMIN_GROUP_ID –∏–∑ config.py
            text=message_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ send_to_moderation: {e}")


async def handle_approve(callback_query: types.CallbackQuery, bot):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û–¥–æ–±—Ä–∏—Ç—å":
      1. –ú–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤ –ë–î –Ω–∞ 'approved'.
      2. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏.
      3. –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.
    """
    try:
        _, city, review_id = callback_query.data.split("_")
        review_id = int(review_id)

        # –û–¥–æ–±—Ä—è–µ–º –æ—Ç–∑—ã–≤
        approve_review(city, review_id)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = get_user_id_by_review(city, review_id)
        if user_id:
            await bot.send_message(user_id, "‚úÖ –í–∞—à –æ—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à—ë–ª –º–æ–¥–µ—Ä–∞—Ü–∏—é!")

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        await bot.delete_message(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ (alert). –ú–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å show_alert, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ
        await callback_query.answer("–û—Ç–∑—ã–≤ –æ–¥–æ–±—Ä–µ–Ω.", show_alert=False)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_approve: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏.", show_alert=True)


async def handle_reject(callback_query: types.CallbackQuery, bot):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–∫–ª–æ–Ω–∏—Ç—å":
      1. –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º user_id –∏–∑ –ë–î (–ø–æ–∫–∞ –æ—Ç–∑—ã–≤ –µ—â—ë —Ç–∞–º).
      2. –£–¥–∞–ª—è–µ–º –æ—Ç–∑—ã–≤ –∏–∑ –ë–î.
      3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏.
      4. –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.
    """
    try:
        _, city, review_id = callback_query.data.split("_")
        review_id = int(review_id)

        # –í–ê–ñ–ù–û: —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º user_id, –ø–æ–∫–∞ –æ—Ç–∑—ã–≤ –µ—â—ë –Ω–µ —É–¥–∞–ª—ë–Ω
        user_id = get_user_id_by_review(city, review_id)

        # –£–¥–∞–ª—è–µ–º –æ—Ç–∑—ã–≤
        reject_review(city, review_id)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id:
            await bot.send_message(user_id, "‚ùå –í–∞—à –æ—Ç–∑—ã–≤ –Ω–µ –ø—Ä–æ—à—ë–ª –º–æ–¥–µ—Ä–∞—Ü–∏—é.")

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        await bot.delete_message(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id
        )

        # –ö–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
        await callback_query.answer("–û—Ç–∑—ã–≤ –æ—Ç–∫–ª–æ–Ω—ë–Ω.", show_alert=False)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_reject: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏.", show_alert=True)


async def handle_user_reviews(callback_query: types.CallbackQuery, bot):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞).
    """
    try:
        _, user_id = callback_query.data.split("_")
        user_id = int(user_id)

        total_count = get_user_reviews_count(user_id)
        if total_count == 0:
            await bot.send_message(
                callback_query.message.chat.id,
                "‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤."
            )
            await callback_query.answer()
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –æ—Ç–∑—ã–≤–æ–≤ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ 0)
        reviews = get_user_reviews_paginated(user_id, page=0)
        await send_user_reviews(
            chat_id=callback_query.message.chat.id,
            reviews=reviews,
            user_id=user_id,
            bot=bot,
            page=0
        )
        await callback_query.answer()

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_user_reviews: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –æ—Ç–∑—ã–≤–æ–≤.", show_alert=True)


async def navigate_user_reviews(callback_query: types.CallbackQuery, bot):
    """
    –õ–∏—Å—Ç–∞–µ—Ç (–ù–∞–∑–∞–¥/–í–ø–µ—Ä—ë–¥) –æ—Ç–∑—ã–≤—ã –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞).
    """
    try:
        _, user_id, page = callback_query.data.split("_")
        user_id = int(user_id)
        page = int(page)

        reviews = get_user_reviews_paginated(user_id, page=page)
        if not reviews:
            await callback_query.answer("–ë–æ–ª—å—à–µ –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ—Ç.", show_alert=True)
            return

        await send_user_reviews(
            chat_id=callback_query.message.chat.id,
            reviews=reviews,
            user_id=user_id,
            bot=bot,
            page=page
        )
        await callback_query.answer()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ navigate_user_reviews: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.", show_alert=True)


async def hide_user_reviews(callback_query: types.CallbackQuery, bot):
    """
    –°–∫—Ä—ã–≤–∞–µ—Ç (—É–¥–∞–ª—è–µ—Ç) —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞).
    """
    try:
        await bot.delete_message(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id
        )
        await callback_query.answer()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ hide_user_reviews: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π.", show_alert=True)


async def send_user_reviews(chat_id, reviews, user_id, bot, page):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.
    """
    try:
        text = f"–û—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{user_id}</b> (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}):\n\n"
        for review in reviews:
            text += (
                f"‚Äî <b>–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å:</b> {review['employer']}\n"
                f"‚Äî <b>–†–µ–π—Ç–∏–Ω–≥:</b> {review['rating']}\n"
                f"‚Äî <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {review['comment']}\n"
                f"‚Äî <b>–î–∞—Ç–∞:</b> {review['date']}\n"
                f"‚Äî <b>–°—Ç–∞—Ç—É—Å:</b> {review['status']}\n\n"
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        next_page_reviews = get_user_reviews_paginated(user_id, page=page + 1)

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = InlineKeyboardMarkup(row_width=3)

        if page > 0:
            keyboard.insert(
                InlineKeyboardButton(
                    "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data=f"navigate_{user_id}_{page - 1}"
                )
            )

        if len(next_page_reviews) > 0:
            keyboard.insert(
                InlineKeyboardButton(
                    "‚û°Ô∏è –í–ø–µ—Ä—ë–¥",
                    callback_data=f"navigate_{user_id}_{page + 1}"
                )
            )

        # –ö–Ω–æ–ø–∫–∞ ¬´–°–∫—Ä—ã—Ç—å¬ª
        keyboard.add(InlineKeyboardButton("‚ùå –°–∫—Ä—ã—Ç—å", callback_data="hide_reviews"))

        await bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ send_user_reviews: {e}")


__all__ = [
    "send_to_moderation",
    "handle_approve",
    "handle_reject",
    "handle_user_reviews",
    "navigate_user_reviews",
    "hide_user_reviews",
]